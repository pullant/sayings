import csv
from datetime import date

import config
INFO = config.INFO
QUEUE = config.QUEUE
PHRASES = config.PHRASES
fieldnames = ['ID', 'date', 'days', 'phrase']


def main():
    return


def build_queue():

    # FIRST RUN
    # create INFO set both dates to today
    # RUNNING
    # get last_queue_update from INFO
    # compare it to today
    # same:
    #    do nothing
    # different:
    #    build QUEUE from last_queue_update +1 to today
    #    set last_queue_update and todayI equal to today

    # I need a stable date for today (todayI), cannot use the live
    # today generated by the system (today).
    # - when writing: in the case that between the last queue generated
    # and the writing of the new phrase the date changes making
    # the queue not longer ordered as intended. With the new phrases
    # in the same date going after the phrases scheduled for that date.
    # - when reviewing:

    # GET todayI and last_queue_update
    todayI = date.today().strftime('%Y%m%d')

    # first run PHRASES DOES NOT EXIST yet
    # neither does QUEUE, no queue to build
    if not PHRASES.exists() or not QUEUE.exists():
        return todayI

    # QUEUE is empty
    # no queue to build
    # or days pass by and now there is a queue to build
    # but for that I need last_queue_update
    if QUEUE.read_text().split('\n')[1] == '':
        # get smallest date in PHRASES
        # or get it from INFO
        last_queue_update = INFO.read_text().split('\n')[1]

    # there is a QUEUE
    # date of last entry in QUEUE is last_queue_update
    else:
        with QUEUE.open('r', newline='') as queue:
            last_queue_update = queue.readlines()[-1].strip().split(',')[1]

    # RUNNING
    # Get from PHRASES all the entries that have
    # a date between (last_queue_update + 1 ) and (todayI)
    # Append them to QUEUE in order 1 day at a time
    with PHRASES.open('r', newline='') as phrases:
        phrases_reader = csv.DictReader(phrases)
        with QUEUE.open('a', newline='') as queue:
            queue_writer = csv.DictWriter(queue, fieldnames=fieldnames)

            # Have to add entries in order since the queue is taking from the top
            # Number of times to go over PHRASES to add the phrases one day at a time = today - last_queue_update
            for times in range(int(todayI) - int(last_queue_update)):
                last_queue_update = int(last_queue_update) + 1
                for entry in phrases_reader:
                    if int(entry['date']) == last_queue_update:
                        queue_writer.writerow(entry)
                phrases.seek(0) # back to the beginning of PHRASES
                next(phrases) # skip top row header

    # update INFO
    INFO.write_text(f'last_queue_update\n{todayI}\n')

    return todayI


if __name__ == "__main__":
    main()

